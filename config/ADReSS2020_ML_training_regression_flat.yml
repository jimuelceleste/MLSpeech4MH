name: "ADReSS 2020 ML Training - Linguistic Features - Regression Replication"
description: |
  Experiment protocol patterned from Shah et al. (2021) for Linguistic Features 
  Frontiers in Computer Science 3, 624659. DOI: 10.3389/fcomp.2021.624659
  Note: First, the type of cross-validation procedure (nested vs flat) was not
  specified in the paper. Here, flat subject-wise cross-validation is implemented. 
  Second, the scoring used for hyperparameter optimization was also not mentioned. 
  Here, negative RMSE score is used as the optimization scoring metric. Last, the 
  features used in the study were extracted using CLAN. Here, we extracted linguistic 
  features using LFTK. This replication experiment aims to test whether the 
  same performance as the study could be achieved using the LFTK feature set.

  Note: For the regression task, one sample was removed (S001) since it did not have
  an MMSE value.

training_config:
  technique: "flat_cross_validation"
  parameters:
    task: "regression"
    metadata__filename: "metadata.csv"
    metadata__label_column: "mmse"
    fold__technique: "subject_wise"
    fold__n_splits: 5
    fold__random_state: 42
    fold__shuffle: True
    optimization__technique: "grid_search"
    optimization__scoring: "neg_root_mean_squared_error"
    evaluation__metrics: [
      "root_mean_squared_error",
      "r2_score"
    ]

pipeline_config: 
  - unique_id: "random_forest_regressor"
    steps:
      feature_scaler: "standard_scaler"
      pca: "pca"
      model: "random_forest_regressor"
    parameters:
      feature_scaler__with_mean: [True]
      feature_scaler__with_std: [True]
      pca__n_components: [20, 30]
      model__n_estimators: [100, 300, 500, 700]
      model__max_features: [5, 15, 25, 35, 45, 55]
      model__min_samples_leaf: [1, 2, 3, 4]

  - unique_id: "svm_regressor"
    steps: 
      feature_scaler: "standard_scaler"
      pca: "pca"
      model: "support_vector_regressor"
    parameters:
      feature_scaler__with_mean: [True]
      feature_scaler__with_std: [True]
      pca__n_components: [20, 30]
      model__C: [0.1, 1, 10, 100, 1000]
      model__kernel: ['linear', 'rbf', 'poly']

  - unique_id: "linear_regressor"
    steps: 
      feature_scaler: "standard_scaler"
      pca: "pca"
      model: "linear_regressor"
    parameters:
      feature_scaler__with_mean: [True]
      feature_scaler__with_std: [True]
      pca__n_components: [20, 30]

  - unique_id: "xgb_regressor"
    steps: 
      feature_scaler: "standard_scaler"
      pca: "pca"
      model: "xgb_regressor"
    parameters:
      feature_scaler__with_mean: [True]
      feature_scaler__with_std: [True]
      pca__n_components: [20, 30]
      model__max_depth: [5, 6, 7, 8]
      model__learning_rate: [0.02, 0.05, 0.07, 0.1]
      model__n_estimators: [50, 100, 200, 500, 1000]